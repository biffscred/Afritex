const mysql = require("mysql2");
const fs = require("fs");
const path = require("path");
const archiver = require("archiver");

const db = mysql.createConnection({
  user: "root",
  password: "root", // Mets ton mot de passe MySQL (laisse vide si tu n'en as pas)
  database: "Afritex",
  socketPath: "/Applications/MAMP/tmp/mysql/mysql.sock" 
});

// üìå Requ√™te SQL pour r√©cup√©rer les images
const sqlQuery = `
  SELECT image FROM Product WHERE image IS NOT NULL
  UNION
  SELECT image FROM Fabric WHERE image IS NOT NULL
  UNION
  SELECT image FROM Accessory WHERE image IS NOT NULL
  UNION
  SELECT image FROM Model WHERE image IS NOT NULL
`;

const destinationFolder = "exported_images";

// üìå V√©rifier la connexion MySQL avant d'ex√©cuter la requ√™te
db.connect((err) => {
  if (err) {
    console.error("‚ùå Erreur de connexion √† MySQL :", err);
    return;
  }
  console.log("‚úÖ Connexion MySQL r√©ussie !");

  db.query(sqlQuery, (err, results) => {
    if (err) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des images :", err);
      db.end();
      return;
    }

    // üìÇ Cr√©er le dossier s'il n'existe pas
    if (!fs.existsSync(destinationFolder)) {
      fs.mkdirSync(destinationFolder);
    }

    let copiedImages = 0;

    results.forEach((row) => {
      const imagePath = row.image.trim();
      const sourcePath = path.join(__dirname, "public", imagePath);
      const destPath = path.join(__dirname, destinationFolder, path.basename(imagePath));

      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, destPath);
        copiedImages++;
      } else {
        console.warn(`‚ö†Ô∏è Image introuvable : ${sourcePath}`);
      }
    });

    console.log(`‚úÖ ${copiedImages} images copi√©es dans '${destinationFolder}'`);

    // üì¶ Cr√©ation du fichier ZIP
    createZip();
    db.end();
  });
});

// üîπ Fonction pour compresser le dossier en ZIP
function createZip() {
  const output = fs.createWriteStream("exported_images.zip");
  const archive = archiver("zip", { zlib: { level: 9 } });

  output.on("close", () => {
    console.log(`‚úÖ Archive ZIP cr√©√©e : exported_images.zip (${archive.pointer()} bytes)`);
  });

  archive.on("error", (err) => {
    console.error("‚ùå Erreur lors de la cr√©ation du ZIP :", err);
  });

  archive.pipe(output);
  archive.directory(destinationFolder, false);
  archive.finalize();
}
