import { getToken } from "next-auth/jwt";
import prisma from '../../../../lib/prisma';
import { NextResponse } from 'next/server';

const secret = process.env.NEXTAUTH_SECRET;

// Gestion de la mise √† jour de la quantit√© (m√©thode PUT)
export async function PATCH(req, context) {
  console.log("üöÄ Requ√™te PATCH re√ßue pour modifier la quantit√© d'un article.");

  const token = await getToken({ req, secret });
  if (!token || !token.id) {
    return NextResponse.json({ message: "Vous devez √™tre connect√©." }, { status: 401 });
  }

  const userId = token.id;
  const itemId = parseInt(context.params.itemId);
  const { action } = await req.json(); // "increment" ou "decrement"

  console.log(`üîç Modification de l'article ${itemId}, action: ${action}`);

  if (isNaN(itemId) || !["increment", "decrement"].includes(action)) {
    return NextResponse.json({ message: "Requ√™te invalide." }, { status: 400 });
  }

  try {
    const orderItem = await prisma.orderItem.findUnique({
      where: { id: itemId },
      include: { order: true },
    });

    if (!orderItem || orderItem.order.userId !== userId) {
      return NextResponse.json({ message: "Article introuvable ou non autoris√©." }, { status: 404 });
    }

    let newQuantity = orderItem.quantity + (action === "increment" ? 1 : -1);
    let updatedOrder;

    if (newQuantity <= 0) {
      await prisma.orderItem.delete({ where: { id: itemId } });
      console.log("üóëÔ∏è Article supprim√© du panier.");
    } else {
      await prisma.orderItem.update({
        where: { id: itemId },
        data: { quantity: newQuantity },
      });
      console.log("‚úÖ Quantit√© mise √† jour :", newQuantity);
    }

    // ‚úÖ Mise √† jour du total de la commande
    const updatedTotal = await prisma.orderItem.aggregate({
      where: { orderId: orderItem.orderId },
      _sum: { price: true },
    }).then(res => res._sum.price || 0);

    updatedOrder = await prisma.order.update({
      where: { id: orderItem.orderId },
      data: { total: updatedTotal },
    });

    console.log("üìä Nouveau total de la commande mis √† jour :", updatedTotal);

    return NextResponse.json({ message: "Quantit√© mise √† jour.", quantity: newQuantity, total: updatedTotal }, { status: 200 });

  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    return NextResponse.json({ message: "Erreur serveur.", error: error.message }, { status: 500 });
  }
}
// Gestion de la suppression d'un article (m√©thode DELETE)
export async function DELETE(req, context) {
  console.log("üöÄ Requ√™te DELETE re√ßue pour la suppression d'un article du panier.");

  // V√©rifier si l'utilisateur est connect√©
  const token = await getToken({ req, secret });
  if (!token || !token.id) {
    console.log("‚ùå Utilisateur non authentifi√©.");
    return NextResponse.json({ message: "Vous devez √™tre connect√© pour interagir avec le panier." }, { status: 401 });
  }

  const userId = token.id;
  const itemId = parseInt(context.params.itemId); // R√©cup√©ration de l'ID depuis l'URL

  console.log("üîç ID de l'article re√ßu :", itemId);

  if (isNaN(itemId)) {
    console.log("‚ùå ID de l'article non valide.");
    return NextResponse.json({ message: "ID de l'article requis pour la suppression." }, { status: 400 });
  }

  try {
    // V√©rifier si l'article appartient √† l'utilisateur
    const orderItem = await prisma.orderItem.findUnique({
      where: { id: itemId },
      include: { order: true },
    });

    if (!orderItem || orderItem.order.userId !== userId) {
      console.log("‚ùå L'article √† supprimer n'appartient pas √† l'utilisateur ou est introuvable.");
      return NextResponse.json({ message: "Article introuvable ou non autoris√©." }, { status: 404 });
    }

    // Supprimer l'article du panier
    await prisma.orderItem.delete({
      where: { id: itemId },
    });

    // ‚úÖ Recalcul du total apr√®s suppression
const updatedTotal = await prisma.orderItem.aggregate({
  where: { orderId: orderItem.orderId },
  _sum: { price: true },
}).then(res => res._sum.price || 0);

// ‚úÖ Mise √† jour de `total` dans la commande
await prisma.order.update({
  where: { id: orderItem.orderId },
  data: { total: updatedTotal },
});

console.log("üìä Nouveau total de la commande apr√®s suppression :", updatedTotal);

    console.log("‚úÖ Article supprim√© avec succ√®s.");
    return NextResponse.json({ message: "Article supprim√© du panier." }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de l'article :", error);
    return NextResponse.json({ message: "Erreur serveur lors de la suppression de l'article." }, { status: 500 });
  }}