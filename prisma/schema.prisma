generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Accessory {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float
  fabricId    Int?
  productId   Int

  product Product @relation("ProductToAccessory", fields: [productId], references: [id], onDelete: Cascade)
  fabric  Fabric? @relation(fields: [fabricId], references: [id], onDelete: Cascade)

  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  color          String?
  artisanId      Int?
  artisan        Artisan?         @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  accessoryimage AccessoryImage[]
  country        Country[]        @relation("AccessoryCountries")

  @@index([artisanId])
  @@index([fabricId])
}

model AccessoryImage {
  id          Int       @id @default(autoincrement())
  url         String
  altText     String?
  accessoryId Int
  accessory   Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)

  @@index([accessoryId])
}

model Artisan {
  id        Int         @id @default(autoincrement())
  name      String
  countryId Int
  accessory Accessory[]
  country   Country     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  model     Model[]
  product   Product[]

  @@index([countryId])
}

model Country {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  artisans    Artisan[]
  accessories Accessory[] @relation("AccessoryCountries")
  fabrics     Fabric[]    @relation("FabricCountries")
  models      Model[]     @relation("ModelCountries")
  products    Product[]   @relation("ProductCountries")
}

model Fabric {
  id        Int     @id @default(autoincrement())
  material  String?
  pattern   String?
  productId Int     @unique // Ajout de @unique pour une relation One-to-One

  origin    String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  color     String?
  size      Float?
  name      String   @unique
  image     String?
  product   Product  @relation("FabricToProduct", fields: [productId], references: [id], onDelete: Cascade)

  price       Float
  accessories Accessory[]
  fabricimage FabricImage[]
  models      Model[]
  country     Country[]     @relation("FabricCountries")
}

model FabricImage {
  id       Int     @id @default(autoincrement())
  url      String
  altText  String?
  fabricId Int
  fabric   Fabric  @relation(fields: [fabricId], references: [id], onDelete: Cascade)

  @@index([fabricId])
}

model Model {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  productId   Int
  fabricId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  color       String?
  artisanId   Int?
  image       String?

  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  fabric     Fabric?      @relation(fields: [fabricId], references: [id], onDelete: Cascade)
  artisan    Artisan?     @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  modelimage ModelImage[]
  country    Country[]    @relation("ModelCountries")

  @@index([artisanId])
  @@index([fabricId])
}

model ModelImage {
  id      Int     @id @default(autoincrement())
  url     String
  altText String?
  modelId Int
  model   Model   @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  total     Float
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitem OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([orderId])
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String          @db.Text
  price       Float
  category    ProductCategory
  image       String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  available   Boolean         @default(true)
  artisanId   Int?
  color       String?
  material    String?

  fabric      Fabric?     @relation("FabricToProduct")
  accessories Accessory[] @relation("ProductToAccessory")
  models      Model[]

  artisan   Artisan?    @relation(fields: [artisanId], references: [id])
  country   Country[]   @relation("ProductCountries")
  orderitem OrderItem[]

  @@index([artisanId])
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  order         Order[]
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime
}

enum UserRole {
  USER
  ADMIN
}

enum ProductCategory {
  FABRIC
  MODEL
  ACCESSORY
}
