generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Accessory {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Float
  fabricId       Int
  color          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  fabric         Fabric           @relation(fields: [fabricId], references: [id], onDelete: Cascade)
  artisanId      Int?
  artisan        Artisan?         @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  accessoryimage AccessoryImage[]
  orderItems     OrderItem[]
  products       Product[]
  countries      Country[]        @relation("accessorycountries")

  @@index([fabricId])
}

model AccessoryImage {
  id          Int       @id @default(autoincrement())
  url         String
  altText     String?
  accessoryId Int
  accessory   Accessory  @relation(fields: [accessoryId], references: [id], onDelete: Cascade)

  @@index([accessoryId])
}

model Country {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  accessories Accessory[] @relation("accessorycountries")
  fabrics     Fabric[]    @relation("fabriccountries")
  models      Model[]     @relation("modelcountries")
  artisans    Artisan[]   @relation("countryArtisans")
  products    Product[]   @relation("ProductCountries")
}

model Fabric {
  id           Int           @id @default(autoincrement())
  name         String        
  material     String?
  pattern      String?
  origin       String?
  color        String?
  price        Float  
  size         Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  accessories  Accessory[]    
  models       Model[]        
  products     Product[]      
  fabricImages FabricImage[]  
  countries    Country[]      @relation("fabriccountries")
  orderItems   OrderItem[]    @relation("FabricToOrderItems")
}

model FabricImage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  fabricId  Int
  fabric    Fabric   @relation(fields: [fabricId], references: [id], onDelete: Cascade)

  @@index([fabricId])
}

model Model {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String?      // Champ image pour stocker l'URL de l'image
  fabricId    Int
  color       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  fabric      Fabric        @relation(fields: [fabricId], references: [id], onDelete: Cascade)
  artisanId   Int?
  artisan     Artisan?      @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  modelImages ModelImage[]
  orderItems  OrderItem[]
  products    Product[]
  countries   Country[]     @relation("modelcountries")

  @@index([fabricId])
}

model ModelImage {
  id      Int     @id @default(autoincrement())
  url     String
  altText String?
  modelId Int
  model   Model   @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int         
  total     Float
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id          Int        @id @default(autoincrement())
  orderId     Int?
  userId      Int?
  modelId     Int?
  accessoryId Int?
  fabricId    Int?
  quantity    Int
  price       Float

  accessory   Accessory? @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
  model       Model?     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  fabric      Fabric?    @relation(fields: [fabricId], references: [id], name: "FabricToOrderItems", onDelete: Cascade)
  order       Order?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user        User?      @relation(fields: [userId], references: [id])  // Relation avec User

  @@index([accessoryId])
  @@index([modelId])
  @@index([fabricId])
  @@index([orderId])
  @@index([userId])  // Index pour userId
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String           @db.Text
  price       Float
  countries   Country[]        @relation("ProductCountries")
  category    ProductCategory
  image       String
  available   Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  fabricId    Int?
  modelId     Int?
  accessoryId Int?
  artisanId   Int?
  accessory   Accessory?       @relation(fields: [accessoryId], references: [id])
  fabric      Fabric?          @relation(fields: [fabricId], references: [id])
  model       Model?           @relation(fields: [modelId], references: [id])
  artisan     Artisan?         @relation(fields: [artisanId], references: [id], name: "artisanProducts")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  orders        Order[]
  orderItems    OrderItem[] // Relation inverse avec OrderItem
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime
}

model Artisan {
  id          Int        @id @default(autoincrement())
  name        String
  countryId   Int
  country     Country     @relation(fields: [countryId], references: [id], name: "countryArtisans", onDelete: Cascade)
  models      Model[]
  accessories Accessory[]
  products    Product[]   @relation(name: "artisanProducts")
}

enum UserRole {
  USER
  ADMIN
}

enum ProductCategory {
  FABRIC
  MODEL
  ACCESSORY
}
