generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accessory {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Float
  fabricId       Int
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  color          String?
  artisanId      Int?
  artisan        artisan?         @relation(fields: [artisanId], references: [id], onDelete: Cascade, map: "Accessory_artisanId_fkey")
  fabric         fabric           @relation(fields: [fabricId], references: [id], onDelete: Cascade, map: "Accessory_fabricId_fkey")
  accessoryimage accessoryimage[]
  orderitem      orderitem[]
  product        product?
  country        country[]        @relation("accessorycountries")

  @@index([artisanId], map: "Accessory_artisanId_fkey")
  @@index([fabricId], map: "Accessory_fabricId_idx")
}

model accessoryimage {
  id          Int       @id @default(autoincrement())
  url         String
  altText     String?
  accessoryId Int 
  accessory   accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade, map: "AccessoryImage_accessoryId_fkey")

  @@index([accessoryId], map: "AccessoryImage_accessoryId_idx")
}

model artisan {
  id        Int         @id @default(autoincrement())
  name      String
  countryId Int
  accessory accessory[]
  country   country     @relation(fields: [countryId], references: [id], onDelete: Cascade, map: "Artisan_countryId_fkey")
  model     model[]
  product   product[]

  @@index([countryId], map: "Artisan_countryId_fkey")
}

model country {
  id          Int         @id @default(autoincrement())
  name        String      @unique(map: "Country_name_key")
  artisan     artisan[]
  accessories accessory[] @relation("accessorycountries")
  fabrics     fabric[]    @relation("fabriccountries")
  models      model[]     @relation("modelcountries")
  products    product[]   @relation("productcountries")
}

model fabric {
  id          Int           @id @default(autoincrement())
  material    String?
  pattern     String?
  origin      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  color       String?
  size        Float?
  name        String
  image       String?
  price       Float
  accessory   accessory[]
  fabricimage fabricimage[]
  model       model[]
  orderitem   orderitem[]
  product     product?
  country     country[]     @relation("fabriccountries")
}

model fabricimage {
  id       Int     @id @default(autoincrement())
  url      String
  altText  String?
  fabricId Int
  fabric   fabric  @relation(fields: [fabricId], references: [id], onDelete: Cascade, map: "FabricImage_fabricId_fkey")

  @@index([fabricId], map: "FabricImage_fabricId_idx")
}

model model {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Float
  fabricId    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  color       String?
  artisanId   Int?
  image       String?
  artisan     artisan?     @relation(fields: [artisanId], references: [id], onDelete: Cascade, map: "Model_artisanId_fkey")
  fabric      fabric       @relation(fields: [fabricId], references: [id], onDelete: Cascade, map: "Model_fabricId_fkey")
  modelimage  modelimage[]
  orderitem   orderitem[]
  product     product?
  country     country[]    @relation("modelcountries")

  @@index([artisanId], map: "Model_artisanId_fkey")
  @@index([fabricId], map: "Model_fabricId_idx")
}

model modelimage {
  id      Int     @id @default(autoincrement())
  url     String
  altText String?
  modelId Int
  model   model   @relation(fields: [modelId], references: [id], onDelete: Cascade, map: "ModelImage_modelId_fkey")

  @@index([modelId], map: "ModelImage_modelId_idx")
}

model order {
  id        Int         @id @default(autoincrement())
  userId    Int
  total     Float
  createdAt DateTime    @default(now())
  user      user        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Order_userId_fkey")
  orderitem orderitem[]

  @@index([userId], map: "Order_userId_idx")
}

model orderitem {
  id          Int        @id @default(autoincrement())
  orderId     Int?
  modelId     Int?
  accessoryId Int?
  quantity    Int
  price       Float
  fabricId    Int?
  userId      Int?
  accessory   accessory? @relation(fields: [accessoryId], references: [id], onDelete: Cascade, map: "OrderItem_accessoryId_fkey")
  fabric      fabric?    @relation(fields: [fabricId], references: [id], onDelete: Cascade, map: "OrderItem_fabricId_fkey")
  model       model?     @relation(fields: [modelId], references: [id], onDelete: Cascade, map: "OrderItem_modelId_fkey")
  order       order?     @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderItem_orderId_fkey")
  user        user?      @relation(fields: [userId], references: [id], map: "OrderItem_userId_fkey")

  @@index([accessoryId], map: "OrderItem_accessoryId_idx")
  @@index([fabricId], map: "OrderItem_fabricId_idx")
  @@index([modelId], map: "OrderItem_modelId_idx")
  @@index([orderId], map: "OrderItem_orderId_idx")
  @@index([userId], map: "OrderItem_userId_idx")
}

model product {
  id          Int              @id @default(autoincrement())
  name        String
  description String           @db.Text
  price       Float
  category    product_category
  image       String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  fabricId    Int?             @unique
  modelId     Int?             @unique
  accessoryId Int?             @unique
  available   Boolean          @default(true)
  artisanId   Int?
  color       String?
  material    String?
  accessory   accessory?       @relation(fields: [accessoryId], references: [id], map: "Product_accessoryId_fkey")
  artisan     artisan?         @relation(fields: [artisanId], references: [id], map: "Product_artisanId_fkey")
  fabric      fabric?          @relation(fields: [fabricId], references: [id], map: "Product_fabricId_fkey")
  model       model?           @relation(fields: [modelId], references: [id], map: "Product_modelId_fkey")
  country     country[]        @relation("productcountries")

  @@index([artisanId], map: "Product_artisanId_fkey")
}

model user {
  id            Int         @id @default(autoincrement())
  email         String      @unique(map: "User_email_key")
  password      String
  role          user_role   @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified DateTime?
  order         order[]
  orderitem     orderitem[]
}

model verificationtoken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique(map: "VerificationToken_token_key")
  expires DateTime
}

enum user_role {
  USER
  ADMIN
}

enum product_category {
  FABRIC
  MODEL
  ACCESSORY
}