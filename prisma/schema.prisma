generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accessory {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Float
  fabricId       Int
  color          String?          // Champ pour la couleur de l'accessoire
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  fabric         fabric           @relation(fields: [fabricId], references: [id])
  artisanId      Int?             // L'artisan qui a conçu cet accessoire
  artisan        artisan?         @relation(fields: [artisanId], references: [id])
  accessoryimage accessoryimage[]
  orderitem      orderitem[]
  products       product[]        // Relation un-à-plusieurs avec les produits
  country        country[]        @relation("accessorycountries")

  @@index([fabricId])
}

model accessoryimage {
  id          Int       @id @default(autoincrement())
  url         String
  altText     String?
  accessoryId Int
  accessory   accessory @relation(fields: [accessoryId], references: [id])

  @@index([accessoryId])
}

model country {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  accessory  accessory[] @relation("accessorycountries")
  fabric     fabric[]    @relation("fabriccountries") // Relation inverse avec les tissus
  model      model[]     @relation("modelcountries")
  artisan    artisan[]   @relation("countryArtisans") // Relation pour les artisans
  products   product[]   @relation("ProductCountries") // Relation avec le modèle product

}

model fabric {
  id         Int           @id @default(autoincrement())
  material   String
  pattern    String?
  origin     String?
  color      String?        // Champ pour la couleur dominante du tissu
  size       Float?         // Champ pour la taille ou la longueur du tissu
  createdAt  DateTime       @default(now())
  updatedAt  DateTime
  accessory  accessory[]    // Relation avec les accessoires utilisant ce tissu
  model      model[]        // Relation avec les modèles utilisant ce tissu
  products   product[]      // Relation un-à-plusieurs avec les produits
  fabricimage  fabricimage[]  // Ajout de la relation inverse avec fabricimage
  country      country[]      @relation("fabriccountries") // Relation avec plusieurs pays
}

model fabricimage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  fabricId  Int
  fabric    fabric   @relation(fields: [fabricId], references: [id])

  @@index([fabricId])
}

model model {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Float
  fabricId    Int
  color       String?       // Champ pour la couleur du modèle
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  fabric      fabric       @relation(fields: [fabricId], references: [id])
  artisanId   Int?         // L'artisan qui a conçu ce modèle
  artisan     artisan?     @relation(fields: [artisanId], references: [id])
  modelimage  modelimage[]
  orderitem   orderitem[]
  products    product[]    // Relation un-à-plusieurs avec les produits
  country     country[]    @relation("modelcountries")

  @@index([fabricId])
}

model modelimage {
  id      Int     @id @default(autoincrement())
  url     String
  altText String?
  modelId Int
  model   model   @relation(fields: [modelId], references: [id])

  @@index([modelId])
}

model order {
  id        Int         @id @default(autoincrement())
  userId    Int
  total     Float
  createdAt DateTime    @default(now())
  user      user        @relation(fields: [userId], references: [id])
  orderitem orderitem[]

  @@index([userId])
}

model orderitem {
  id          Int        @id @default(autoincrement())
  orderId     Int
  modelId     Int?
  accessoryId Int?
  quantity    Int
  price       Float
  accessory   accessory? @relation(fields: [accessoryId], references: [id])
  model       model?     @relation(fields: [modelId], references: [id])
  order       order      @relation(fields: [orderId], references: [id])

  @@index([accessoryId])
  @@index([modelId])
  @@index([orderId])
}

model product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  price       Float
  countries   country[]        @relation("ProductCountries") // Relation many-to-many avec country}
  category    product_category
  image       String
  available   Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  fabricId    Int?             // Relation un-à-plusieurs avec fabric
  modelId     Int?             // Relation un-à-plusieurs avec model
  accessoryId Int?             // Relation un-à-plusieurs avec accessory
  artisanId   Int?             // Relation avec artisan
  accessory   accessory?       @relation(fields: [accessoryId], references: [id])
  fabric      fabric?          @relation(fields: [fabricId], references: [id])
  model       model?           @relation(fields: [modelId], references: [id])
  artisan     artisan?         @relation(fields: [artisanId], references: [id], name: "artisanProducts")
}

model user {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role          user_role @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  emailVerified DateTime?
  order         order[]
}

model verificationtoken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime
}

model artisan {
  id        Int      @id @default(autoincrement())
  name      String
  countryId Int
  country   country   @relation(fields: [countryId], references: [id], name: "countryArtisans")
  models    model[]   // L'artisan conçoit des modèles
  accessories accessory[] // L'artisan conçoit des accessoires
  products  product[] @relation(name: "artisanProducts") // Relation inverse avec les produits
}

enum user_role {
  USER
  ADMIN
}

enum product_category {
  FABRIC
  MODEL
  ACCESSORY
}
